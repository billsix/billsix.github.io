Rotations - Demo 07
===================


Purpose
^^^^^^^

Learn about rotations, and the order in which to read
a sequence of transformations.  This demo does not
work correctly, because of a misunderstanding
of how rotations work.


Move the Paddles using the Keyboard
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

==============  ================================
Keyboard Input  Action
==============  ================================
*w*             Move Left Paddle Up
*s*             Move Left Paddle Down
*k*             Move Right Paddle Down
*i*             Move Right Paddle Up

*d*             Increase Left Paddle's Rotation
*a*             Decrease Left Paddle's Rotation
*l*             Increase Right Paddle's Rotation
*j*             Decrease Right Paddle's Rotation
==============  ================================



..
   TODO -- discuss method chaining

For a trigonometry  explanation of rotating in 2D,
see https://www.alanzucconi.com/2016/02/03/2d-rotations/

Rotate the Paddles About their Center
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^



Normalized-device-coordinates are not a natural system of
numbers for use by humans.  Imagine that the paddles in the previous
chapters exist in real life, and are 20 meters wide and 60 meters tall.
The graphics programmer should be able to use those numbers directly;
they shouldn't have to manually transform the distances into normalized-device-coordinates.

Whatever a convenient numbering system is (i.e. coordinate system) for modeling objects
is called "model-space".  Since a paddle has four corners, which corner should be a
the origin (0,0)?  If you don't already know what you want at the origin, then
none of the corners should be; instead put the center of the object
at the origin (Because by putting the center of the object at the origin,
scaling and rotating the object are trivial).


Rotation Around Origin (0,0)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^

We can also rotate an object around (0,0) by rotating
all of the object's vertices around (0,0).

In high school math, you will have learned about sin, cos, and tangent.
Typically the angles are described on the unit circle, where a rotation
starts from the positive x axis.  We can expand on this knowledge, allowing
us to rotate a given vertex around the origin (0,0).  This is done
by separating the x and y value, rotating each of them seperately,
and then adding the results together.

That might not have been fully clear.  Let me try again.
The vertex (0.5,0.4) can be separated into two vertices, (0.5,0) and (0,0.4).

.. figure:: static/rotate3.png
    :align: center
    :alt: Rotate
    :figclass: align-center

    Rotate

.. figure:: static/rotate4.png
    :align: center
    :alt: Rotate
    :figclass: align-center

    Rotate


These vertices can be added together to create the original vertex.
But, before we do that, let's rotate each of the vertices.

(0.5,0) is on the x-axis, so rotating it by "angle" degrees, results
in vertex (0.5*cos(angle), 0.5*sin(angle)).  Notice that both the x and
y values are multiplied by 0.5.  This is because rotations should not affect
the distance of the point from the origin (0,0).  (0.5,0) has length 0.5.
(cos(angle), sin(angle) has length 1. By multipling both the x and y
component by 0.5, we are scaling the vertex back to its original distance
from the origin.

.. figure:: static/rotate.png
    :align: center
    :alt: Rotate
    :figclass: align-center

    Rotate

(0,0.4) is on the y-axis, so rotating it by "angle" degrees, results
in vertex (0.4*-sin(angle), 0.4*cos(angle)).

.. figure:: static/rotate2.png
    :align: center
    :alt: Rotate
    :figclass: align-center

    Rotate

Wait.  Why is negative sin applied to the angle to make the x value,
and cos applied to angle to make the y value?
Trigonometric operations such as sin, cos, and tangent assume that the rotation is happening on
the unit circle, starting from (1,0) on the x axis.  Since we want
to rotate an angle starting from (0,1) on the y axis, sin and
cos must be swapped.  Sin is positive from 0 to 90 degrees, but
we want a negative value for our rotation of the y axis since the rotation is happening counter-clockwise,
hence the negative sin.


After the rotations have been applied, sum the results to
get your vertex rotated around the origin!

(0.5*cos(angle), 0.5*sin(angle)) + (0.4*-sin(angle), 0.4*cos(angle)) =
(0.5*cos(angle) + 0.4*-sin(angle), 0.5*sin(angle) + 0.4*cos(angle))


.. code:: Python
   :number-lines:

     class Vertex:
         def __init__(self, x, y):
             self.x = x
             self.y = y

         def __repr__(self):
             return f"Vertex(x={repr(self.x)},y={repr(self.y)})"

         def translate(self, tx, ty):
             return Vertex(x=self.x + tx, y=self.y + ty)

         def scale(self, scale_x, scale_y):
             return Vertex(x=self.x * scale_x, y=self.y * scale_y)

         # NEW
         # definition of rotate, from the description above
         # cos and sin are defined in the math module.
         #
         # Question - how can you determine if math.cos and math.sin
         # are defined in terms of radians or in terms of degrees?
         def rotate(self, angle_in_radians):
             return Vertex(
                 x=self.x * math.cos(angle_in_radians) - self.y * math.sin(angle_in_radians),
                 y=self.x * math.sin(angle_in_radians) + self.y * math.cos(angle_in_radians),
             )


     class Paddle:
         # NEW
         # a rotation instance variable is defined, with a default value of 0
         def __init__(
             self,
             vertices,
             r,
             g,
             b,
             initial_position,
             rotation=0.0,
             input_offset_x=0.0,
             input_offset_y=0.0,
         ):
             self.vertices = vertices
             self.r = r
             self.g = g
             self.b = b
             self.rotation = rotation
             self.input_offset_x = input_offset_x
             self.input_offset_y = input_offset_y
             self.initial_position = initial_position

.. code:: Python
   :number-lines:

     def handle_movement_of_paddles():
         global paddle1, paddle2

         if glfw.get_key(window, glfw.KEY_S) == glfw.PRESS:
             paddle1.input_offset_y -= 10.0
         if glfw.get_key(window, glfw.KEY_W) == glfw.PRESS:
             paddle1.input_offset_y += 10.0
         if glfw.get_key(window, glfw.KEY_K) == glfw.PRESS:
             paddle2.input_offset_y -= 10.0
         if glfw.get_key(window, glfw.KEY_I) == glfw.PRESS:
             paddle2.input_offset_y += 10.0

         # NEW -- handle inputs for rotation
         global paddle_1_rotation, paddle_2_rotation

         if glfw.get_key(window, glfw.KEY_A) == glfw.PRESS:
             paddle1.rotation += 0.1
         if glfw.get_key(window, glfw.KEY_D) == glfw.PRESS:
             paddle1.rotation -= 0.1
         if glfw.get_key(window, glfw.KEY_J) == glfw.PRESS:
             paddle2.rotation += 0.1
         if glfw.get_key(window, glfw.KEY_L) == glfw.PRESS:
             paddle2.rotation -= 0.1


.. code:: Python
   :number-lines:

     while not glfw.window_should_close(window):
         while (
             glfw.get_time() < time_at_beginning_of_previous_frame + 1.0 / TARGET_FRAMERATE
         ):
             pass
         time_at_beginning_of_previous_frame = glfw.get_time()

         glfw.poll_events()

         width, height = glfw.get_framebuffer_size(window)
         glViewport(0, 0, width, height)
         glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

         draw_in_square_viewport()
         handle_movement_of_paddles()

         glColor3f(paddle1.r, paddle1.g, paddle1.b)

         glBegin(GL_QUADS)
         for model_space in paddle1.vertices:
             # NEW - does rotate work as you'd expect?
             world_space = (
                 model_space.translate(
                     tx=paddle1.initial_position.x, ty=paddle1.initial_position.y
                 )
                 .translate(tx=paddle1.input_offset_x, ty=paddle1.input_offset_y)
                 .rotate(paddle1.rotation)
             )
             ndc_space = world_space.scale(scale_x=1.0 / 100.0, scale_y=1.0 / 100.0)
             glVertex2f(ndc_space.x, ndc_space.y)
         glEnd()

         glColor3f(paddle2.r, paddle2.g, paddle2.b)

         glBegin(GL_QUADS)
         for model_space in paddle2.vertices:
             # NEW - does rotate work as you'd expect?
             world_space = (
                 model_space.translate(
                     tx=paddle2.initial_position.x, ty=paddle2.initial_position.y
                 )
                 .translate(tx=paddle2.input_offset_x, ty=paddle2.input_offset_y)
                 .rotate(paddle2.rotation)
             )
             ndc_space = world_space.scale(scale_x=1.0 / 100.0, scale_y=1.0 / 100.0)
             glVertex2f(ndc_space.x, ndc_space.y)
         glEnd()

         glfw.swap_buffers(window)

     glfw.terminate()
