Window Resizing and Proportionality - Demo 03
=============================================

.. toctree::


Purpose
^^^^^^^

Given the goal of keeping the paddles proportial regardless of window
size, fix the previous demo.

Keeping the Paddles Proportional
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

Create procedure to ensure proportionality

In the previous demo, if the user resized the window, the paddles looked bad,
as they were shrunk in one direction if the window became too thin or too fat.

.. figure:: _static/disproportionate1.png
    :align: center
    :alt: Yuck
    :figclass: align-center

    Yuck

.. figure:: _static/disproportionate2.png
    :align: center
    :alt: Yuck
    :figclass: align-center

    Yuck


Assume that this is a problem for the application we are making.  What
would a solution be?  Ideally, we would like to draw our paddles with
a black background within a square region in the center of the window, regardless of the dimensions
of the window.

OpenGL has a solution for us.  The *viewport* is a rectangular region
within the window into which OpenGL will render.  The normalized-device-coordinates
will therefore resolve to the sub-screen space of the viewport, instead of the whole
window.


.. figure:: _static/viewport.png
    :align: center
    :alt: Nice
    :figclass: align-center

    Nice

Because we will only draw in a subset of the window, and because all subsequent
chapters will use this functionality, I have created a procedure for use
in all chapters. "draw_in_square_viewport" is a function.


Code
^^^^


.. code-block:: Python

     def draw_in_square_viewport():

         # clear to gray.
         glClearColor(0.2, 0.2, 0.2, 1.0)  # r  # g  # b  # a
         glClear(GL_COLOR_BUFFER_BIT)

         width, height = glfw.get_framebuffer_size(window)
         # figure out the minimum dimension of the window
         min = width if width < height else height

         # the scissor test allows us to specify a region
         # of the framebuffer into which the opengl operations
         # will apply.  In this case, in the framebuffer is all gray.
         # by calling glScissor, we are setting a value on a square
         # of pixels which says "only do the opengl call on these".
         # As we will learn later, OpenGL stores much more information
         # per pixel than just it's current color.
         glEnable(GL_SCISSOR_TEST)
         glScissor(
             int((width - min) / 2.0),  # min x
             int((height - min) / 2.0),  # min y
             min,  # width x
             min,
         )  # width y

         glClearColor(0.0, 0.0, 0.0, 1.0)  # r  # g  # b  # a
         # gl clear will only update the square to black values.
         glClear(GL_COLOR_BUFFER_BIT)
         # disable the scissor test, so now any opengl calls will
         # happen as usual.
         glDisable(GL_SCISSOR_TEST)

         # But, we only want to draw within the black square.
         # We set the viewport, so that the NDC coordinates
         # will be mapped the the region of screen coordinates
         # that we care about, which is the black square.
         glViewport(
             int(0.0 + (width - min) / 2.0),  # min x
             int(0.0 + (height - min) / 2.0),  # min y
             min,  # width x
             min,
         )  # width y

.. code-block:: Python

     while not glfw.window_should_close(window):
         glfw.poll_events()

         width, height = glfw.get_framebuffer_size(window)
         glViewport(0, 0, width, height)
         glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

         # render scene
         draw_in_square_viewport()

         # draw paddle 1
         glColor3f(0.578123, 0.0, 1.0)  # r  # g  # b
         glBegin(GL_QUADS)
         glVertex2f(-1.0, -0.3)  # x  # y
         glVertex2f(-0.8, -0.3)  # x  # y
         glVertex2f(-0.8, 0.3)  # x  # y
         glVertex2f(-1.0, 0.3)  # x  # y
         glEnd()
         # draw paddle 2
         glColor3f(1.0, 0.0, 0.0)
         glBegin(GL_QUADS)

         glVertex2f(0.8, -0.3)
         glVertex2f(1.0, -0.3)
         glVertex2f(1.0, 0.3)
         glVertex2f(0.8, 0.3)
         glEnd()

         # done with frame, flush and swap buffers
         # Swap front and back buffers
         glfw.swap_buffers(window)

     glfw.terminate()
