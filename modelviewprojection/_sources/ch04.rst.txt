Moving the Paddles - Keyboard Input - Demo 04
=============================================


Purpose
^^^^^^^

Add movement to the paddles using keyboard input.


Move the Paddles using the Keyboard
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

==============  ======================
Keyboard Input  Action
==============  ======================
*w*             Move Left Paddle Up
*s*             Move Left Paddle Down
*k*             Move Right Paddle Down
*i*             Move Right Paddle Up
==============  ======================


Paddles which don't move are quite boring.  Let's make them move up or down
by getting keyboard input.



.. code:: Python
   :number-lines:

     # define a class in Python for Vertex
     class Vertex:
         # __init__ is the constructor, all methods
         # on an instance explicitly take self as the first parameter.
         # properties can be added dynamically to objects in Python.
         def __init__(self, x, y):
             self.x = x
             self.y = y

         def __repr__(self):
             return f"Vertex(x={repr(self.x)},y={repr(self.y)})"


     # define a class for the Paddle
     class Paddle:
         def __init__(self, vertices, r, g, b, input_offset_x=0.0, input_offset_y=0.0):
             # Python allows default values to parameters, and allows
             # the calling function to specify the name of the argument
             self.vertices = vertices
             self.r = r
             self.g = g
             self.b = b
             self.input_offset_x = input_offset_x
             self.input_offset_y = input_offset_y

         def __repr__(self):
             return f"Paddle(vertices={repr(self.vertices)},r={repr(self.r)},g={repr(self.g)     },b={repr(self.b)},input_offset_x={repr(self.input_offset_x)},input_offset_y={repr({sel     f.input_offset_y})})"


     paddle1 = Paddle(
         vertices=[
             Vertex(x=-1.0, y=-0.3),  # keyword arguments
             Vertex(x=-0.8, y=-0.3),  # can only be used at the end
             Vertex(x=-0.8, y=0.3),  # try removing "y="
             Vertex(x=-1.0, y=0.3),
         ],
         r=0.578123,
         g=0.0,
         b=1.0,
     )

     paddle2 = Paddle(
         vertices=[Vertex(0.8, -0.3), Vertex(1.0, -0.3), Vertex(1.0, 0.3), Vertex(0.8, 0.3)]     ,
         r=1.0,
         g=0.0,
         b=0.0,
     )


     # -If 's' is pressed this frame, subtract 0.1 more from paddle1.offsetY.  If the
     # key continues to be held down over time, paddle1.offsetY will continue to decrease.

     # -If 'w' is pressed this frame, add 0.1 more to paddle1.offsetY.

     # -If 'k' is pressed this frame, subtract 0.1 more from paddle_2_input_offsetY.

     # -If 'i' is pressed this frame, add 0.1 more to paddle_2_input_offsetY.


     def handle_movement_of_paddles():
         # when writing to global variables within a nested scope,
         # you need to declare their scope at the top of the nested scope.
         global paddle1, paddle2
         # for data that is just read, this is not needed.
         # it's a quick of Python's scope resolution rules,
         # but hey, Python is popular because of the good decisions
         # made in the aggregate, with some weirdness in corner cases

         # this is how you test if a key was pressed
         if glfw.get_key(window, glfw.KEY_S) == glfw.PRESS:
             paddle1.input_offset_y -= 0.1
         if glfw.get_key(window, glfw.KEY_W) == glfw.PRESS:
             paddle1.input_offset_y += 0.1
         if glfw.get_key(window, glfw.KEY_K) == glfw.PRESS:
             paddle2.input_offset_y -= 0.1
         if glfw.get_key(window, glfw.KEY_I) == glfw.PRESS:
             paddle2.input_offset_y += 0.1

.. code:: Python
   :number-lines:

     TARGET_FRAMERATE = 60  # fps

     # to try to standardize on 60 fps, compare times between frames
     time_at_beginning_of_previous_frame = glfw.get_time()


     # Loop until the user closes the window
     while not glfw.window_should_close(window):

         # poll the time to try to get a constant framerate
         while (
             glfw.get_time() < time_at_beginning_of_previous_frame + 1.0 / TARGET_FRAMERATE
         ):
             pass
         # set for comparison on the next frame
         time_at_beginning_of_previous_frame = glfw.get_time()

         # Poll for and process events
         glfw.poll_events()

         width, height = glfw.get_framebuffer_size(window)
         glViewport(0, 0, width, height)
         glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT)

         # render scene
         draw_in_square_viewport()
         handle_movement_of_paddles()

         # draw paddle 1
         glColor3f(paddle1.r, paddle1.g, paddle1.b)

         # Draw paddle 1, relative to the world-space origin.
         # Add paddle1.offsetY to the "y" component of every vertex

         glBegin(GL_QUADS)
         # for loop in Python, each of paddle1's vertices gets
         # bound to "vertex" for the loop
         for vertex in paddle1.vertices:
             glVertex2f(
                 vertex.x, vertex.y + paddle1.input_offset_y
             )  # add in the offset so that the paddle moves
         glEnd()

         # draw paddle 2
         glColor3f(paddle2.r, paddle2.g, paddle2.b)

         # Draw paddle 2, relative to the world-space origin.
         # Add paddle_2_input_offsetY to the "y" component of every vertex
         glBegin(GL_QUADS)
         for vertex in paddle2.vertices:
             glVertex2f(vertex.x, vertex.y + paddle2.input_offset_y)
         glEnd()

         # done with frame, flush and swap buffers
         # Swap front and back buffers
         glfw.swap_buffers(window)



.. figure:: static/plot3.png
    :align: center
    :alt: Adding input offset
    :figclass: align-center

    Adding input offset to Paddle 1


.. figure:: static/plot4.png
    :align: center
    :alt: Adding input offset to Paddle 1
    :figclass: align-center

    Adding input offset to Paddle 2
