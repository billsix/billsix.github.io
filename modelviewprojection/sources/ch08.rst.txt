Rotation Fix Attempt 1 - Demo 08
================================

Purpose
^^^^^^^

Fix the rotation problem from the previous demo in a seemingly intuitive
way, but do it inelegantly.

Lesson learned by end of Demo 08.  Read function composition from left
to right, instead of from right to left.

.. figure:: static/screenshots/demo08.png
    :align: center
    :alt: Demo 08
    :figclass: align-center

    Demo 08



.. figure:: static/rotate-sloppy-forwards.gif
    :align: center
    :alt:
    :figclass: align-center

    Works but sloppy

.. figure:: static/rotate-sloppy-backwards.gif
    :align: center
    :alt:
    :figclass: align-center

    Works but sloppy



Move the Paddles using the Keyboard
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

==============  ================================
Keyboard Input  Action
==============  ================================
*w*             Move Left Paddle Up
*s*             Move Left Paddle Down
*k*             Move Right Paddle Down
*i*             Move Right Paddle Up

*d*             Increase Left Paddle's Rotation
*a*             Decrease Left Paddle's Rotation
*l*             Increase Right Paddle's Rotation
*j*             Decrease Right Paddle's Rotation
==============  ================================

Description
^^^^^^^^^^^

The problem in the last demo is that all rotations happen relative
to (0,0).  By translating our paddles to their position,
they are then rotated not around their modelspace center,
but by global space's center.
In this demo, we move the paddles to their position,
back to the origin, rotate, and then back to their position.
This works, but it should be clear that it's an inefficient
method at best; at worst, we are not thinking about
the transformations clearly.

Taking a look at the various spaces, the code in this demo
is going to go back and forth between those spaces.  The code
in this demo is the wrong way to think about rendering.


Cayley Graph
^^^^^^^^^^^^

.. figure:: static/demo08.png
    :align: center
    :alt: Demo 08
    :figclass: align-center



Code
^^^^



.. literalinclude:: ../src/demo08/demo.py
   :language: python
   :linenos:
   :lineno-start: 90
   :lines: 90-111


The Event Loop
~~~~~~~~~~~~~~




.. literalinclude:: ../src/demo08/demo.py
   :language: python
   :linenos:
   :lineno-start: 179
   :lines: 179

::

    ...


.. literalinclude:: ../src/demo08/demo.py
   :language: python
   :linenos:
   :lineno-start: 197
   :lines: 197-206


::

    ...


.. literalinclude:: ../src/demo08/demo.py
   :language: python
   :linenos:
   :lineno-start: 209
   :lines: 209-218

Math
^^^^


.. math::

    \begin{equation}
     \vec{T}(\vec{v};\vec{t}) =
    \begin{bmatrix}
    v_{x} \\
    v_{y}
    \end{bmatrix} +
    \begin{bmatrix}
    t_{x} \\
    t_{y}
    \end{bmatrix}
    \end{equation}

.. math::

    \begin{equation}
     \vec{T}^{-1}(\vec{v};\vec{t}) =
    \begin{bmatrix}
    v_{x} \\
    v_{y}
    \end{bmatrix} -
    \begin{bmatrix}
    t_{x} \\
    t_{y}
    \end{bmatrix}
    \end{equation}


.. math::

    \begin{equation}
    \vec{R}(\vec{v};\theta) = v_x *
    \begin{bmatrix}
    cos(\theta) \\
    sin(\theta)
    \end{bmatrix} + v_y *
    \begin{bmatrix}
    -sin(\theta) \\
    cos(\theta)
    \end{bmatrix}
    \end{equation}


.. math::

    \begin{equation}
    \vec{R}^{-1}(\vec{v};\theta) = v_x *
    \begin{bmatrix}
    cos(\theta) \\
    -sin(\theta)
    \end{bmatrix} + v_y *
    \begin{bmatrix}
    sin(\theta) \\
    cos(\theta)
    \end{bmatrix}
    \end{equation}



.. math::

    \begin{equation}
    \vec{S}(\vec{v};\vec{s}) =
    \begin{bmatrix}
    s_x * v_x \\
    s_y * v_y
    \end{bmatrix}
    \end{equation}

.. math::

    \begin{equation}
    \vec{S}^{-1}(\vec{v};\vec{s}) =
    \begin{bmatrix}
    1/s_x * v_x \\
    1/s_y * v_y
    \end{bmatrix}
    \end{equation}






.. math::

    \begin{equation}
    \vec{g}_{p1}^{w} =
    \vec{T}(; \vec{v_{offset_{p1}}})
    \end{equation}

.. math::

    \begin{equation}
    \vec{g}^{-1}{_{p1}^{w}} =
    \vec{T}(; -1 * \vec{v_{offset_{p1}}})
    \end{equation}


.. math::

    \begin{equation}
    \begin{split}
    \vec{f}_{p1}^{w} & = \vec{g}_{p1}^{w} \circ \vec{R}(;\theta_{p1}) \circ \vec{g}^{-1}{_{p1}^{w}} \circ \vec{g}_{p1}^{w} \\
                     & = \vec{g}_{p1}^{w} \circ \vec{R}(;\theta_{p1}) \\
                     & = \vec{T}(; \vec{v_{offset_{p1}}}) \circ \vec{R}(;\theta_{p1})
    \end{split}
    \end{equation}


and

.. math::

    \begin{equation}
    \begin{split}
    \vec{f}_{p2}^{w} & = \vec{g}_{p2}^{w} \circ \vec{R}(;\theta_{p2}) \circ \vec{g}^{-1}{_{p2}^{w}} \circ \vec{g}_{p2}^{w} \\
                     & = \vec{g}_{p2}^{w} \circ \vec{R}(;\theta_{p2}) \\
                     & = \vec{T}(; \vec{v_{offset_{p2}}}) \circ \vec{R}(;\theta_{p2})
    \end{split}
    \end{equation}




.. math::
   :label: euler

    \begin{equation}
    \vec{f}_{w}^{ndc} =
    \vec{S}(; \begin{bmatrix}
    1/100 \\
    1/100
    \end{bmatrix})
    \end{equation}


foo bar :eq:`euler`
