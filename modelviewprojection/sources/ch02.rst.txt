Draw A Rectange - Demo 02
=========================


Purpose
^^^^^^^

Learn how to plot a rectangle.  Learn about OpenGL's coordinate system.

.. figure:: static/screenshots/demo02.png
    :align: center
    :alt: Demo 02
    :figclass: align-center

    Demo 02


Code
^^^^

GLFW/OpenGL Initialization
~~~~~~~~~~~~~~~~~~~~~~~~~~

The setup code is the same.  Initialize GLFW.  Set the OpenGL version.
Create the window.  Set a key handler for closing.  Set the background to be black.
Execute the event/drawing loop.



The Event Loop
~~~~~~~~~~~~~~

Within the event loop, demo02/demo.py draws 2 rectangles, as one might see in
a game of Pong.


Draw Paddles
&&&&&&&&&&&&

A black screen is not particularly interesting, so
let's draw something, say, two rectangles.
Where should they be, and what color should they be?

"glColor3f" sets a global variable, which makes it the color to be used
for the subsequently-drawn graphical shape.  The background will be black,
so lets make the first paddle purple, and a second paddle red.

"glBegin(GL_QUADS)" tells OpenGL that we will soon specify 4 *vertices*,
(i.e. points) which define the
quadrilateral.  The vertices will be specified by calling "glVertex2f" 4 times.

"glEnd()" tells OpenGL that we have finished providing vertices for
the begun quadrilateral.


.. literalinclude:: ../src/demo02/demo.py
   :language: python
   :linenos:
   :lineno-start: 64
   :lines: 64-70




The framebuffer, which has not yet been flushed to the monitor, has geometry which looks like this:

.. figure:: static/plot1.png
    :align: center
    :alt: Rectangle
    :figclass: align-center

    Rectangle


.. literalinclude:: ../src/demo02/demo.py
   :language: python
   :linenos:
   :lineno-start: 72
   :lines: 72-78

The framebuffer, which has not yet been flushed to the monitor,
has geometry which looks like this:

.. figure:: static/plot2.png
    :align: center
    :alt: Rectangle
    :figclass: align-center

    Rectangle

.. literalinclude:: ../src/demo02/demo.py
   :language: python
   :linenos:
   :lineno-start: 80
   :lines: 80

* done with frame, flush the current buffer to the monitor
* Swap front and back buffers


The frame sent to the monitor is a set of values like this ::

    bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
    bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
    bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
    PPPPPbbbbbbbbbbbbbbbbbbbbbbbbbbbRRRRR
    PPPPPbbbbbbbbbbbbbbbbbbbbbbbbbbbRRRRR
    PPPPPbbbbbbbbbbbbbbbbbbbbbbbbbbbRRRRR
    PPPPPbbbbbbbbbbbbbbbbbbbbbbbbbbbRRRRR
    PPPPPbbbbbbbbbbbbbbbbbbbbbbbbbbbRRRRR
    PPPPPbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
    bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
    bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb
    bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb


What do we have to do to convert from normalized-device-coordinates
into individual colors for each pixel?  Nothing, OpenGL does that for us; therefore
we never have to think in terms of pixels, only in terms of vertices of shapes,
specified by normalized-device-coordinates.

Why is that desirable?

Normalized-Device-Coordinates
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

The author owns two monitors, one which has 1024x768 pixels, and one which has
1920x1200 pixels.  When he purchases a game from Steam, he expects that his game
will run correctly on either monitor, in full-screen mode.  If a graphics programmer
had to explictly set each indiviual pixel's color, the the programmer would have to
program using "screen-space"(Any "space" means a system of numbers which you're using.
Screen-space means you're specifically using pixel coordinates, i.e, set pixel (5,10) to be red).

What looks alright is screen-space on a large monitor...

.. figure:: static/screenspace2.png
    :align: center
    :alt: Screenspace
    :figclass: align-center

    Screenspace


Isn't even the same picture on a smaller monitor.

.. figure:: static/screenspace.png
    :align: center
    :alt: Screenspace
    :figclass: align-center

    Screenspace



Like any good program or library, OpenGL creates an abstraction.
In this case, it abstracts over screen-space, thus freeing the
programmer from caring about screen size.  If a programmer does not want to program
in discrete (discrete means integer values, not continuous) screen-space,
what type of numbers should he use?  Firstly, it should be a continuous space, meaning
that it should be in decimal numbers.  Because if a real-world object is 10.3 meters long, a programmer
should be able to enter "float foo = 10.3".  Secondly, it should be a fixed range vertically
and an fixed range horizontally.  OpenGL will have to convert points from some space to screen-space,
and since OpenGL does this in hardware (i.e. you can't programmatically change how the conversion
happens), it should be a fixed size.

OpenGL uses *normalized-device-coordinates*,
which is a continous space from -1.0 to 1.0 horizontally,
and -1.0 to 1.0 vertically.


By specifying geometry using normalized-device-coordinates,
OpenGL will automatically convert from a continuous, -1.0 to 1.0 space,
to discrete pixel-space.

.. figure:: static/ndcSpace.png
    :align: center
    :alt: NDC space
    :figclass: align-center

    NDC space


Whether we own a small monitor

.. figure:: static/ndcSpace1.png
    :align: center
    :alt: NDC space
    :figclass: align-center

    NDC space

Or a large monitor.

.. figure:: static/screenspace2.png
    :align: center
    :alt: NDC space
    :figclass: align-center

    NDC space
