..
   Copyright (c) 2018-2021 William Emerison Six

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.

Moving Camera in 3D Space - Demo 16
===================================

Purpose
^^^^^^^

Make a moving camera in 3D space.  Use Ortho to put a rectangular prism
into NDC.

.. figure:: static/screenshots/camera1.png
    :align: center
    :alt: Camera
    :figclass: align-center

    Camera space


Problem purposefully put in
~~~~~~~~~~~~~~~~~~~~~~~~~~~

When moving front to back, parts of the geometry will disappear.
This is because it gets "clipped out", as the geometry will be outside
of NDC, (-1 to 1 on all three axis).  We could fix this by making
a bigger ortho rectangular prism, but that won't solve the fundamental
problem.

This doesn't look like a 3D application should, where further away
objects are smaller.  This will be fixed in demo17.


.. figure:: static/screenshots/demo16.png
    :align: center
    :alt: Demo 16
    :figclass: align-center

    Demo 16


How to Execute
^^^^^^^^^^^^^^

On Linux or on MacOS, in a shell, type "python src/demo16/demo.py".
On Windows, in a command prompt, type "python src\\demo16\\demo.py".


Move the Paddles using the Keyboard
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

==============  ==============================================
Keyboard Input  Action
==============  ==============================================
*w*             Move Left Paddle Up
*s*             Move Left Paddle Down
*k*             Move Right Paddle Down
*i*             Move Right Paddle Up

*d*             Increase Left Paddle's Rotation
*a*             Decrease Left Paddle's Rotation
*l*             Increase Right Paddle's Rotation
*j*             Decrease Right Paddle's Rotation

*UP*            Move the camera up, moving the objects down
*DOWN*          Move the camera down, moving the objects up
*LEFT*          Move the camera left, moving the objects right
*RIGHT*         Move the camera right, moving the objects left

*q*             Rotate the square around it's center
*e*             Rotate the square around paddle 1's center
==============  ==============================================

Description
^^^^^^^^^^^

There are new keyboard inputs to control the moving camera.
As you would expect to see
in a first person game, up moves the camera forward (-z),
down moves the camera backwards (z), left rotates the camera
as would happen if you rotated your body to the left, and likewise
for right. Page UP and Page DOWN rotate the camera to look up
or to look down.

To enable this, the camera is modeled with a data structure,
having a position in x,y,z, and two rotations (one around
the camera's x axis, and one around the camera's y axis).

To position the camera, with all operations relative to world space,
you would

#. translate to the camera's position, using the actual position values
   of camera position (not their negatives)
#. rotate around the y axis
#. rotate around the x axis

To visualize this, run "python mvpVisualization/demo3.py"

The ordering of 1) before 2) and 3) should be clear, as
we are imagining a coordinate system that moves, just
like we do for the modelspace to world space transformations.
The ordering of 2) and 3) is very important, and 2 rotations
across different axes are not commutative.
https://en.wikipedia.org/wiki/Commutative_property.



Try this.  Rotate your head to the right a little more that
45 degrees.  Now rotate your head back a little more than 45 degrees.

Now, reset your head (glPopMatrix). Try rotating your head back 45 degrees.  Once it's there,
rotate your head (not your neck), 45 degrees.  It's different, and uncomfortable!

We rotate the camera by the y axis first, then by the relative x axis,
for the same reason.


.. literalinclude:: ../src/demo16/demo.py
   :language: python
   :linenos:
   :lineno-start: 295
   :lines: 295-297


(Remember, read bottom up, just like the previous demos
for modelspace to worldspace data)


Back to the point, we are envisioning the camera relative to the world
space by making a moving coordinate system (composed of an origin, 1 unit
in the "x" axis, 1 unit in the "y" axis, and 1 unit in the "z" axis), where
each subsequent transformation is relative to the previous coordinate system.
(This system is beneficial btw because it allows us to think of one coordinate
system at a time, and forget how we got there, (similar to a Markov process,
https://en.wikipedia.org/wiki/Markov_chain))

But that system of thinking works only when we are placing the camera into
it's position/orientation.  Looking at

.. figure:: static/demo10-2.png
    :align: center
    :alt: Demo 10
    :figclass: align-center

    Demo 10

thinking in this way would allow us to transform vertices defined in camera space
to world space, just like the paddles/square.

But we don't want that.  Instead, we want to take the modelspace geometry from,
say Paddle1 space, to world space,
and then to camera space (which is going in the opposite direction, therefore requires
an inverse operation.

Given that the inverse of a sequence of transformations is the sequence backwards,
with each transformations inverted, we must do that to get from world space
to camera space.


The inverted form is

.. literalinclude:: ../src/demo16/demo.py
   :language: python
   :linenos:
   :lineno-start: 298
   :lines: 298-300



Trying to reason about the camera's position and orientation is difficult.
As such, in this demo, I have added the non-inverted transformations for camera
placement in world space
in the comments, but will not do so in subsequent demos.
p

Before we start, take a look at ../mvpVisualization/demo.py
to see the 3D geometry drawn both in world space and in their modelspace.

To count in the modelspace, look at a given axis (which I've drawn in units
of 10 for ease of viewing, although it should normally be in units of 1)
On the red axis, it's 2*10 units wide, and 6*10 units tall, which matches
the modelspace data in the constructor for the Paddles.

Take a look at ../mvpVisualization/demoAnimation.py to see an animated
version of the axis being moved from into their world space positions,
relative to which the modelspace data is drawn.

The gray axis in the middle happens when we hold onto the original
axes, as we first draw paddle 1 relative to it, the square relative
to paddle1, but we need to later get back to world space so that we
can draw paddle2.  In later code, we will use glPushMatrix to
save onto a copy of the current axes, and glPopMatrix to discard
our "current at the time" axis, returning back to the saved axis.  Like a quicksave
in a video game.

To follow along with the code, read the transformations from modelspace
to worldspace backwards, and you will see how the axes are moving and
why.

Take a look at ../mvpVisualization/demoViewWorldTopLevel.py to see an
animated version that shows the objects being placed in world space,
the camera being put into it's space using the normal way of thinking
of a coordinate system being moved, but then the transformations
are inverted, brining the objects in world space with it,
in backwards order, to put the NDC cube defined in camera
space to the NDC defined in world space.  One way to think of it,
is that NDC is defined at the top level of the tree of transformations,
so in world space.  We need to get the -1 to 1 space in x,y,z relative
to camera space to match the -1 to 1 space in world space.

eog ../images/demo10.png

Why do we do this?  Because it doesn't matter how we think about
the coordinate transformations, the computer will always execute
the code from top down, take the resulting coordinates, and clip
out anything outside of -1 to 1. So, world space. The computer has no notion
of camera space, it's our own invention, so we need to get the coordinates
that we care about into that space.

After looking at the demos and explaining the code, now cover the camera movement code.

Other things added
Added rotations around the x axis, y axis, and z axis.
https://en.wikipedia.org/wiki/Rotation_matrix




.. literalinclude:: ../src/demo16/demo.py
   :language: python
   :linenos:
   :lineno-start: 168
   :lines: 126-151

.. literalinclude:: ../src/demo16/demo.py
   :language: python
   :linenos:
   :lineno-start: 191
   :lines: 191-200

.. literalinclude:: ../src/demo16/demo.py
   :language: python
   :linenos:
   :lineno-start: 213
   :lines: 213-240

.. literalinclude:: ../src/demo16/demo.py
   :language: python
   :linenos:
   :lineno-start: 285
   :lines: 285-326


the square should not be visible when hidden behind the paddle1,
as we did a translate by -10.
this is because without depth buffering, the object drawn last
clobbers the color of any previously drawn object at the pixel.
Try moving the square drawing code to the beginning, and you will
see that the square can be hidden behind the paddle.


NEW
The input for the camera is completely different
move multiple

TODO -  explaing movement on XZ-plane, on line 230
TODO -  show camera movement in graphviz


pressing right or left changs the rotation of the y axis,
making you look left or right
pressing page up or page down changes how you'll rotate
on the relative x axis to look up or down, after
you've rotated left or right
Don't worry about understanding the movement of the camera in 3D
space for now, this will be explained in demo18.
But, if you want a preview, run ../mvpVisualization/demoViewWorldTopLevel.py,
and look at when the camera translates to it's position, and rotates horizontally.
(before rotating vertically to look up).  The relative negative z axis is where
pressing up will take you, strafing to the right would be in the direction of
the local x axis.


on line 288

::
        #   The camera's position would be placed here, but we need
        #   to do the inverse transformation to get from worldspace
        #   to camera space, from which NDC will be defined.
        #       world_space=   camera_space.rotate_x(camera.rot_x)
        #                                  .rotate_y(camera.rot_y)
        #                                  .translate(tx=camera.x,
        #                                             ty=camera.y,
        #                                             tz=camera.z)


on line 310

::
        #   The camera's position would be placed here, but we need
        #   to do the inverse transformation to get from worldspace
        #   to camera space, from which NDC will be defined.
        #                       world_space.rotate_x(camera.rot_x)
        #                                  .rotate_y(camera.rot_y)
        #                                  .translate(tx=camera.x,
        #                                             ty=camera.y,
        #                                             tz=camera.z)

on line 326

::

        #   The camera's position would be placed here, but we need
        #   to do the inverse transformation to get from worldspace
        #   to camera space, from which NDC will be defined.
        #                       world_space.rotate_x(camera.rot_x)
        #                                  .rotate_y(camera.rot_y)
        #                                  .translate(tx=camera.x,
        #                                             ty=camera.y,
        #                                             tz=camera.z)
