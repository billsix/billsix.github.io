Modelspace - Demo 06
====================


Purpose
^^^^^^^

Learn about modelspace.

.. figure:: static/screenshots/demo06.png
    :align: center
    :alt: Demo 06
    :figclass: align-center

    Demo 06


Move the Paddles using the Keyboard
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

==============  ======================
Keyboard Input  Action
==============  ======================
*w*             Move Left Paddle Up
*s*             Move Left Paddle Down
*k*             Move Right Paddle Down
*i*             Move Right Paddle Up
==============  ======================


Modelspace
^^^^^^^^^^


Normalized-device-coordinates are not a natural system of
numbers for use by humans.  Imagine that the paddles in the previous
chapters exist in real life, and are 20 meters wide and 60 meters tall.
The graphics programmer should be able to use those numbers directly;
they shouldn't have to manually transform the distances into normalized-device-coordinates.

Whatever a convenient numbering system is (i.e. coordinate system) for modeling objects
is called "model-space".  Since a paddle has four corners, which corner should be a
the origin (0,0)?  If you don't already know what you want at the origin, then
none of the corners should be; instead put the center of the object
at the origin (Because by putting the center of the object at the origin,
scaling and rotating the object are trivial).


.. figure:: static/modelspace.png
    :align: center
    :alt: Representing a Paddle using Modelspace
    :figclass: align-center

    Representing a Paddle using Modelspace


Modelspace - the coordinate system (origin plus axis), in which some object's
geometry is defined.



Modelspace to WorldSpace
^^^^^^^^^^^^^^^^^^^^^^^^

Model-space to World-space.

You can view the transformations from first transformation to last,
where all transformations happen relative to the world-space origin.
(this works well for world-space to camera-space,
but not so well for model-space transformations)

.. figure:: static/translation-forwards.gif
    :align: center
    :alt: Translating Paddle 1
    :figclass: align-center

    Translating Paddle 1

.. figure:: static/translation2-forwards.gif
    :align: center
    :alt: Translating Paddle 2
    :figclass: align-center

    Translating Paddle 2



Instead, for model-space to world-space transformations,
it's easier to read the transformations backwards, where the transformations
aren't relative to the global origin, instead it's from the local frame of reference.

When reading the transformations backwards, I think it's best to think of it
as moving the axises, and the plotting the data once the axies are in
their final place.


Why do the two different views of the transformations matter?  In model-space
to world-space transformations, especially once rotation and scaling of model-space
is used, it allows the programmer to forget about most details, just specify
where new objects are relative to that which you are already drawing.

With that said, that doesn't mean that reading the transformations front to back
has no value.  Front to back can useful when dealing with cameraspace transformations,
introduced later.

This will make more sense once rotation is involved.

Scaling
~~~~~~~

.. figure:: static/scale.png
    :align: center
    :alt: Scaling
    :figclass: align-center

    Scaling

Similarly, we can expand or shrink the size of an object
by "scale"ing each of the vertices of the object.
Our global space is -100 to 100 in both dimesnions,
and to get it into NDC, we need to scale by dividing by 100

The follwing diagrams shows the functions that transition between spaces.
The arrow represents a function from one space to another.  All spaces
will resolve to NDC.

.. figure:: static/demo06.png
    :align: center
    :alt: Demo 06
    :figclass: align-center

    Demo 06

..
   .. math::
      \begin{equation*}
       \vec{f}_{p1}^{w}
       \begin{bmatrix}
       x_{p1} \\
       y_{p1} \\
       z_{p1}
       \end{bmatrix} =
       \begin{bmatrix}
       1 & 2 & 3 \\
       4 & 5 & 6 \\
       7 & 8 & 9
       \end{bmatrix} *
       \begin{bmatrix}
       x_{p1} \\
       y_{p1} \\
       z_{p1}
       \end{bmatrix} =
       \begin{bmatrix}
       x_{w} \\
       y_{w} \\
       z_{w}
       \end{bmatrix}
     \end{equation*}


.. math::

    \begin{equation*}
    \begin{split}
    \vec{f}_{p1}^{w}
    \begin{bmatrix}
    x_{p1} \\
    y_{p1}
    \end{bmatrix}
    & =
    \begin{bmatrix}
    x_{p1} \\
    y_{p1}
    \end{bmatrix} +
    \begin{bmatrix}
    t\text{_}x_{worldspace} \\
    t\text{_}y_{worldspace}
    \end{bmatrix} \\
    & =
    \begin{bmatrix}
    x_{w} \\
    y_{w}
    \end{bmatrix}
    \end{split}
    \end{equation*}


where x_p1, y_p1  are the modelspace coordinates of the paddle's vertices,
and where t_x_worldspace, t_y_worldspace,
are the offset from the world space's origin to the center of the paddle, i.e. the translation.



.. math::

    \begin{equation*}
    \vec{f}_{p2}^{w}
    \begin{bmatrix}
    x_{p2} \\
    y_{p2}
    \end{bmatrix} =
    \begin{bmatrix}
    x_{p2} \\
    y_{p2}
    \end{bmatrix} +
    \begin{bmatrix}
    p2\text{_}center\text{_}x_{worldspace} \\
    p2\text{_}center\text{_}y_{worldspace}
    \end{bmatrix}
    \end{equation*}



.. math::

    \begin{equation*}
    \begin{split}
    \vec{f}_{w}^{ndc}
    \begin{bmatrix}
    x_{w} \\
    y_{w}
    \end{bmatrix} & = 1/100 *
    \begin{bmatrix}
    x_{w} \\
    y_{w}
    \end{bmatrix} \\
    &  =
    \begin{bmatrix}
    x_{ndc} \\
    y_{ndc}
    \end{bmatrix}
    \end{split}
    \end{equation*}




.. literalinclude:: ../src/demo06/demo.py
   :language: python
   :linenos:
   :lineno-start: 88
   :lines: 88-94

.. literalinclude:: ../src/demo06/demo.py
   :language: python
   :linenos:
   :lineno-start: 96
   :lines: 96-97

* NEW -- Add the ability to scale a vertex, to stretch or to shrink



.. literalinclude:: ../src/demo06/demo.py
   :language: python
   :linenos:
   :lineno-start: 109
   :lines: 109-134

* paddles are using modelspace coordinates instead of NDC

.. literalinclude:: ../src/demo06/demo.py
   :language: python
   :linenos:
   :lineno-start: 136
   :lines: 136-146


* Movement code needs to happen in Modelspace's units.

Code
^^^^


The Event Loop
~~~~~~~~~~~~~~


.. literalinclude:: ../src/demo06/demo.py
   :language: python
   :linenos:
   :lineno-start: 153
   :lines: 153-158

::

    ...

.. literalinclude:: ../src/demo06/demo.py
   :language: python
   :linenos:
   :lineno-start: 182
   :lines: 182-193

::

    ...
