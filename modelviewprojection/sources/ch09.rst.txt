Rotation Fixed - Sequence of Transforamations - Demo 09
=======================================================

Purpose
^^^^^^^

Make the rotations work correctly by thinking about the problem
more clearly.


.. figure:: static/screenshots/demo09.png
    :align: center
    :alt: Demo 09
    :figclass: align-center

    Demo 09

How to Execute
^^^^^^^^^^^^^^

On Linux or on MacOS, in a command prompt, type "python src/demo09/demo.py".
On Windows, in a command prompt, type "python src\\demo09\\demo.py".


Move the Paddles using the Keyboard
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

==============  ================================
Keyboard Input  Action
==============  ================================
*w*             Move Left Paddle Up
*s*             Move Left Paddle Down
*k*             Move Right Paddle Down
*i*             Move Right Paddle Up

*d*             Increase Left Paddle's Rotation
*a*             Decrease Left Paddle's Rotation
*l*             Increase Right Paddle's Rotation
*j*             Decrease Right Paddle's Rotation
==============  ================================

Description
^^^^^^^^^^^

In the previous demo, The initial translate is effectively canceled out,
leaving a rotation and then a translation.
Translate inverse(Translate) Rotate Translate

Translate inverse(Translate) = Identity.  i.e. 5 * 1/5 = 1,
so we really just need to do a rotation first, and then a translation,
but this can be counterintuitive at first because we like to think
in relative terms.

To understand why the code in this demo works, you can think
about it in one of two ways.  Either there is a sequence
of function calls, all of which happen relative to the global
origin; or, you can read the transformations backwards,
where instead of doing operations on points, the operations
all modify the current axis to a new relative axis,
and all subsequent functions move those relative axises to
new relative axises.

Strong suggestion for computer graphics, especially from
modelspace to global space:
Read the transformations in the latter.

See the transformations below, and the associated animated gifs.



if you read the operations below as rotate, translate1, translate2,
you should imagine it as follows

.. figure:: static/rotate1-forwards.gif
    :align: center
    :alt: Rotation Forwards
    :figclass: align-center

    Rotation Forwards


if instead you read them backwards, imagine the transformations
as follows

.. figure:: static/rotate1-backwards.gif
    :align: center
    :alt: Rotation Bacwards
    :figclass: align-center

    Rotation Backwards



side note.  Typically I use a debugger as an interactive evaluator,
in order to understand how code which I do not understand works.
In computer graphics, the debugger is of limited help because
the transformations on the individual points is not worth
thinking about, and therefore the intermediat results
are worthless for reasoning.

In order to be successful, I highly recommend reading the transformations
backwards, with a moving/rotating/scaled axises.

(This advise will be modified when I introduce transformation stacks,
but the same principle will apply.  Also, on the note of transformation
stacks, N.B. that the scaling from world space to ndc is shared
for both paddles, and that changing the code in one place would
required changing the code for all shapes.)

I prefer to think graphically instead of symbolically.
Another way you can think of this is to rotate the the x axis
and y axis, create graph paper (tick marks) along those new
axis, and then draw the geometry on that new "basis",
instead of the natural basis. (Natural basis just means
the normal x and y axis).
Think of basis as an origin, a unit in various directions,
a graph paper lines drawn.  Then your geometry is drawn
in that space.

In revisting demo 6's space, if we read all of the transformations
below in order, it's following the order of function application.

If instead we read the transformation between spaces backwards in code,
(and going the opposite direction of the arrows), we can view a coordinate
system that is changing (origin can move, and axises can rotate/scale)

Cayley Graph
^^^^^^^^^^^^

.. figure:: static/demo06.png
    :align: center
    :alt: Demo 06
    :figclass: align-center

    Demo 06


ALSO, see mvpVisualization/demo.py and mvpVisualization/demoAnimation.py.
THESE WILL SHOW THE TRANSMORTAIONS backwards much more intuitively.


Same thing for the second paddle.

.. figure:: static/rotate2-forwards.gif
    :align: center
    :alt: Rotate Paddle 2 Forwards
    :figclass: align-center

    Rotate Paddle 2 Forwards

.. figure:: static/rotate2-backwards.gif
    :align: center
    :alt: Rotate Paddle 2 Backwards
    :figclass: align-center

    Rotate Paddle 2 Backwards


Code
^^^^


The Event Loop
~~~~~~~~~~~~~~



.. literalinclude:: ../src/demo09/demo.py
   :language: python
   :linenos:
   :lineno-start: 172
   :lines: 172

::

    ...

.. literalinclude:: ../src/demo09/demo.py
   :language: python
   :linenos:
   :lineno-start: 191
   :lines: 191-199

::

    ...

.. literalinclude:: ../src/demo09/demo.py
   :language: python
   :linenos:
   :lineno-start: 204
   :lines: 204-210
