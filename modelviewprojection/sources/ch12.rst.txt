Rotate the Square - Demo 12
===========================

Purpose
^^^^^^^
Rotate the square around it's origin.  Reading the modelspace to
world space transformations should make this straightforward.
Try reading them from the top down.  Does in make sense that way?




Move the Paddles using the Keyboard
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

==============  ==============================================
Keyboard Input  Action
==============  ==============================================
*w*             Move Left Paddle Up
*s*             Move Left Paddle Down
*k*             Move Right Paddle Down
*i*             Move Right Paddle Up

*d*             Increase Left Paddle's Rotation
*a*             Decrease Left Paddle's Rotation
*l*             Increase Right Paddle's Rotation
*j*             Decrease Right Paddle's Rotation

*UP*            Move the camera up, moving the objects down
*DOWN*          Move the camera down, moving the objects up
*LEFT*          Move the camera left, moving the objects right
*RIGHT*         Move the camera right, moving the objects left

*q*             Rotate the square around it's center
==============  ==============================================

Description
^^^^^^^^^^^

.. code:: Python
   :number-lines:

     # NEW
     square_rotation = 0.0


.. code:: Python
   :number-lines:

     def handle_inputs():
         global square_rotation
         # NEW
         if glfw.get_key(window, glfw.KEY_Q) == glfw.PRESS:
             square_rotation += 0.1

         global camera_x, camera_y

         if glfw.get_key(window, glfw.KEY_UP) == glfw.PRESS:
             camera_y += 10.0
         if glfw.get_key(window, glfw.KEY_DOWN) == glfw.PRESS:
             camera_y -= 10.0
         if glfw.get_key(window, glfw.KEY_LEFT) == glfw.PRESS:
             camera_x -= 10.0
         if glfw.get_key(window, glfw.KEY_RIGHT) == glfw.PRESS:
             camera_x += 10.0

         global paddle1, paddle2

         if glfw.get_key(window, glfw.KEY_S) == glfw.PRESS:
             paddle1.input_offset_y -= 10.0
         if glfw.get_key(window, glfw.KEY_W) == glfw.PRESS:
             paddle1.input_offset_y += 10.0
         if glfw.get_key(window, glfw.KEY_K) == glfw.PRESS:
             paddle2.input_offset_y -= 10.0
         if glfw.get_key(window, glfw.KEY_I) == glfw.PRESS:
             paddle2.input_offset_y += 10.0

         global paddle_1_rotation, paddle_2_rotation

         if glfw.get_key(window, glfw.KEY_A) == glfw.PRESS:
             paddle1.rotation += 0.1
         if glfw.get_key(window, glfw.KEY_D) == glfw.PRESS:
             paddle1.rotation -= 0.1
         if glfw.get_key(window, glfw.KEY_J) == glfw.PRESS:
             paddle2.rotation += 0.1
         if glfw.get_key(window, glfw.KEY_L) == glfw.PRESS:
             paddle2.rotation -= 0.1



Event Loop
^^^^^^^^^^

.. code:: Python
   :number-lines:

         glColor3f(0.0, 0.0, 1.0)
         glBegin(GL_QUADS)
         for model_space in square:
             paddle_1_space = model_space.rotate(square_rotation).translate(tx=20.0, ty=0.0)
             world_space = (
                 paddle_1_space.rotate(paddle1.rotation)
                 .translate(tx=paddle1.initial_position.x, ty=paddle1.initial_position.y)
                 .translate(tx=paddle1.input_offset_x, ty=paddle1.input_offset_y)
             )
             camera_space = world_space.translate(tx=-camera_x, ty=-camera_y)
             ndc_space = camera_space.scale(scale_x=1.0 / 100.0, scale_y=1.0 / 100.0)
             glVertex2f(ndc_space.x, ndc_space.y)
         glEnd()
