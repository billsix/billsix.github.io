..
   Copyright (c) 2018-2023 William Emerison Six

   Permission is hereby granted, free of charge, to any person obtaining a copy
   of this software and associated documentation files (the "Software"), to deal
   in the Software without restriction, including without limitation the rights
   to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
   copies of the Software, and to permit persons to whom the Software is
   furnished to do so, subject to the following conditions:

   The above copyright notice and this permission notice shall be included in all
   copies or substantial portions of the Software.

   THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
   IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
   FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
   AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
   LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
   OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
   SOFTWARE.

Lambda Stack - Demo 18
======================

Purpose
^^^^^^^


Remove repetition in the coordinate transformations,
as previous demos had very similar transformations,
especially from camera space to NDC space.
Each edge of the graph of objects
should only be specified once per frame.


.. figure:: static/demo18-1.png
    :align: center
    :alt: Demo 12
    :figclass: align-center

    Full Cayley graph.

Noticing in the previous demos that the lower parts of the transformations
have a common pattern, we can create a stack of functions for later application.
Before drawing geometry, we add any functions to the top of the stack,
apply all of our functions in the stack to our modelspace data to
get NDC data,
and before we return to the parent
node, we pop the functions we added off of the stack, to ensure that
we return the stack to the state that the parent node gave us.


To explain in more detail ---

What's the difference between drawing paddle 1 and the square?

Here is paddle 1 code

.. literalinclude:: ../src/demo17/demo.py
   :language: python
   :linenos:
   :lineno-start: 377
   :lines: 377-398


Here is the square's code:


.. literalinclude:: ../src/demo17/demo.py
   :language: python
   :linenos:
   :lineno-start: 406
   :lines: 406-427




The only difference is the square's model-space to paddle1 space.  Everything else is exactly the same.
In a graphics program, because the scene is a hierarchy of relative
objects, it's unwise to put this much repetition in the transformation
sequence.  Especially if we might change how the camera operates,
or from perspective to ortho.  It would required a lot of code changes.
And I don't like reading from the bottom of the code up.  Code doesn't
execute that way.  I want to read from top to bottom.

When reading the transformation sequences in the previous demos from top down
the transformation at the top is applied first, the transformation
at the bottom is applied last, with the intermediate results method-chained together.
(look up above for a reminder)


With a function stack, the function at the top of the stack (f5) is applied first,
the result of this is then given as input to f4 (second on the stack), all
the way down to f1, which was the first fn to be placed on the stack,
and as such, the last to be applied. (Last In First Applied - LIFA)


::

                  |-------------------|
     (MODELSPACE) |                   |
       (x,y,z)->  |       f5          |--
                  |-------------------| |
                                        |
               -------------------------
               |
               |  |-------------------|
               |  |                   |
                ->|       f4          |--
                  |-------------------| |
                                        |
               -------------------------
               |
               |  |-------------------|
               |  |                   |
                ->|       f3          |--
                  |-------------------| |
                                        |
               -------------------------
               |
               |  |-------------------|
               |  |                   |
                ->|       f2          |--
                  |-------------------| |
                                        |
               -------------------------
               |
               |  |-------------------|
               |  |                   |
                ->|       f1          |-->  (x,y,z) NDC
                  |-------------------|



So, in order to ensure that the functions in a stack will execute
in the same order as all of the previous demos, they need to be
pushed onto the stack in reverse order.


This means that from modelspace to world space, we can now
read the transformations FROM TOP TO BOTTOM!!!!  SUCCESS!

Then, to draw the square relative to paddle one, those six
transformations will already be on the stack, therefore
only push the differences, and then apply the stack to
the paddle's modelspace data.


How to Execute
^^^^^^^^^^^^^^

On Linux or on MacOS, in a shell, type "python src/demo18/demo.py".
On Windows, in a command prompt, type "python src\\demo18\\demo.py".



Move the Paddles using the Keyboard
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

==============  ==============================================
Keyboard Input  Action
==============  ==============================================
*w*             Move Left Paddle Up
*s*             Move Left Paddle Down
*k*             Move Right Paddle Down
*i*             Move Right Paddle Up

*d*             Increase Left Paddle's Rotation
*a*             Decrease Left Paddle's Rotation
*l*             Increase Right Paddle's Rotation
*j*             Decrease Right Paddle's Rotation

*UP*            Move the camera up, moving the objects down
*DOWN*          Move the camera down, moving the objects up
*LEFT*          Move the camera left, moving the objects right
*RIGHT*         Move the camera right, moving the objects left

*q*             Rotate the square around it's center
*e*             Rotate the square around paddle 1's center
==============  ==============================================

Description
^^^^^^^^^^^

function stack.  The bottom of the stack has
the low index, the top of the stack has the highest
index

.. literalinclude:: ../src/demo18/demo.py
   :language: python
   :linenos:
   :lineno-start: 304
   :lines: 304-304



Given an input vertex, apply the function at the top
of the stack to the vertex, capture the output vertex,
to be used as input to the next lower function on the
stack.  Continue doing this until we get the value
returned from the function at the bottom of the stack.

.. literalinclude:: ../src/demo18/demo.py
   :language: python
   :linenos:
   :lineno-start: 309
   :lines: 309-315


There is an example at the bottom of src/demo18/demo.py

.. literalinclude:: ../src/demo18/demo.py
   :language: python
   :linenos:
   :lineno-start: 457
   :lines: 457-472

Define four functions, which we will compose on the stack.

Push identity onto the stack, which will will never pop off of the stack.

.. literalinclude:: ../src/demo18/demo.py
   :language: python
   :linenos:
   :lineno-start: 477
   :lines: 477-479

.. literalinclude:: ../src/demo18/demo.py
   :language: python
   :linenos:
   :lineno-start: 483
   :lines: 483-485

.. literalinclude:: ../src/demo18/demo.py
   :language: python
   :linenos:
   :lineno-start: 489
   :lines: 489-491

.. literalinclude:: ../src/demo18/demo.py
   :language: python
   :linenos:
   :lineno-start: 495
   :lines: 495-497

.. literalinclude:: ../src/demo18/demo.py
   :language: python
   :linenos:
   :lineno-start: 501
   :lines: 501-503

.. literalinclude:: ../src/demo18/demo.py
   :language: python
   :linenos:
   :lineno-start: 507
   :lines: 507-509

.. literalinclude:: ../src/demo18/demo.py
   :language: python
   :linenos:
   :lineno-start: 513
   :lines: 513-515





Event Loop
^^^^^^^^^^
.. literalinclude:: ../src/demo18/demo.py
   :language: python
   :linenos:
   :lineno-start: 323
   :lines: 323-323

::

    ...



In previous demos, camera_space_to_ndc_space_fn was always
the last function called in the method chained pipeline.  Put it on the bottom of the stack,
by appending it first,
so that "apply_stack" calls this function last

"append" adds the function to the end of a list, where
we conisder the front of the list to be the bottom of the stack,
and the end of the list to be the top of the stack.


.. math::


    \vec{f}_{c}^{ndc}

.. figure:: static/demo18-2.png
    :align: center
    :alt: Demo 12
    :figclass: align-center



.. literalinclude:: ../src/demo18/demo.py
   :language: python
   :linenos:
   :lineno-start: 364
   :lines: 364-364


Unlike in previous demos in which we read the transformations
from model space to world space backwards; this time because the transformations
are on a stack, the fns on the model stack can
be read forwards, where each operation translates/rotates/scales
the current space

The camera's position and orientation are defined relative
to world space like so, read top to bottom:

.. math::


    \vec{f}_{c}^{w}

.. figure:: static/demo18-7.png
    :align: center
    :alt: Demo 12
    :figclass: align-center


.. literalinclude:: ../src/demo18/demo.py
   :language: python
   :linenos:
   :lineno-start: 368
   :lines: 368-374

But, since we need to transform world-space to camera space,
they must be inverted by reversing the order, and negating
the arguments

Therefore the transformations to put the world space into
camera space are.

.. math::


    \vec{f}_{w}^{c}

.. figure:: static/demo18-3.png
    :align: center
    :alt: Demo 12
    :figclass: align-center



.. literalinclude:: ../src/demo18/demo.py
   :language: python
   :linenos:
   :lineno-start: 379
   :lines: 379-383

draw paddle 1
~~~~~~~~~~~~~

Unlike in previous demos in which we read the transformations
from model space to world space backwards; because the transformations
are on a stack, the fns on the model stack can
be read forwards, where each operation translates/rotates/scales
the current space

.. math::


    \vec{f}_{p1}^{w}


.. figure:: static/demo18-4.png
    :align: center
    :alt: Demo 12
    :figclass: align-center


.. literalinclude:: ../src/demo18/demo.py
   :language: python
   :linenos:
   :lineno-start: 389
   :lines: 389-392

for each of the modelspace coordinates, apply all
of the procedures on the stack from top to bottom
this results in coordinate data in NDC space,
which we can pass to glVertex3f

draw the square
~~~~~~~~~~~~~~~

since the modelstack is already in paddle1's space,
and since the blue square is defined relative to paddle1,
just add the transformations relative to it
before the blue square is drawn.  Draw the square, and then
remove these 4 transformations from the stack (done below)

.. math::


    \vec{f}_{s}^{p1}

.. figure:: static/demo18-5.png
    :align: center
    :alt: Demo 12
    :figclass: align-center


.. literalinclude:: ../src/demo18/demo.py
   :language: python
   :linenos:
   :lineno-start: 405
   :lines: 405-416

Now we need to remove fns from the stack so that the
lambda stack will convert from world space to NDC.
This will allow us to just add the transformaions from
world space to paddle2 space on the stack.

.. literalinclude:: ../src/demo18/demo.py
   :language: python
   :linenos:
   :lineno-start: 420
   :lines: 420-425

since paddle2's model_space is independent of paddle 1's space, only
leave the view and projection fns (1) - (4)


draw paddle 2
~~~~~~~~~~~~~


.. math::


    \vec{f}_{p2}^{w}

.. figure:: static/demo18-6.png
    :align: center
    :alt: Demo 12
    :figclass: align-center


.. literalinclude:: ../src/demo18/demo.py
   :language: python
   :linenos:
   :lineno-start: 430
   :lines: 430-441


remove all fns from the function stack, as the next frame will set them
clear makes the list empty, as the list (stack) will be repopulated
the next iteration of the event loop.

.. literalinclude:: ../src/demo18/demo.py
   :language: python
   :linenos:
   :lineno-start: 446
   :lines: 446-446


Swap buffers and execute another iteration of the event loop

.. literalinclude:: ../src/demo18/demo.py
   :language: python
   :linenos:
   :lineno-start: 450
   :lines: 450-450
